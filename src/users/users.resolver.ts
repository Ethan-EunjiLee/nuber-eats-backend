import { UseGuards } from '@nestjs/common';
import { Args, Context, Mutation, Query, Resolver } from '@nestjs/graphql';
import { AuthUser } from 'src/auth/auth-user.decorator';
import { AuthGuard } from 'src/auth/auth.guard';
import {
  CreateAccountInput,
  CreateAccountOutput,
} from './dtos/create-account.dto';
import { EditProfileInput, EditProfileOutput } from './dtos/edit-profile.dto';
import { LoginInput, LoginOutput } from './dtos/login.dto';
import { UserProfileInput, UserProfileOutput } from './dtos/user-profile.dto';
import { VerifyEmailInput, VerifyEmailOutput } from './dtos/verify-email.dto';
import { User, UserRole } from './entities/user.entity';
import { UsersService } from './users.service';
import { Role } from '../auth/role.decorator';

@Resolver((of) => User) // * UserÏôÄ Í¥ÄÎ†®Îêú ResolverÏûÑÏùÑ Î™ÖÏãú, Í¥ÑÌò∏ ÎÇ¥Î∂Ä ÏÉùÎûµ Í∞ÄÎä•
export class UsersResolver {
  constructor(private readonly usersService: UsersService) {}

  // ! ÌöåÏõêÍ∞ÄÏûÖ
  @Mutation((returns) => CreateAccountOutput) // * error? ok!
  async createAccount(
    @Args('input') createAccountInput: CreateAccountInput,
  ): Promise<CreateAccountOutput> {
    return this.usersService.createAccount(createAccountInput);
  }

  // ! Î°úÍ∑∏Ïù∏
  @Mutation((returns) => LoginOutput)
  async login(@Args('input') loginInput: LoginInput): Promise<LoginOutput> {
    try {
      return this.usersService.login(loginInput);
    } catch (error) {
      return {
        ok: false,
        error,
      };
    }
  }

  // ! AuthUser: ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨ÎûåÏùò Ï†ïÎ≥¥ Ï∂úÎ†•
  @Query((returns) => User)
  // @UseGuards(AuthGuard)
  @Role(['Any']) // * Î™®Îì† UserÎäî ÎàÑÍµ¨ÎÇò ÏûêÏã†Ïùò Ï†ïÎ≥¥Î•º Î≥º Ïàò ÏûàÎã§.
  me(@AuthUser() authUser: User) {
    console.log('me authUser: ', authUser);

    return authUser;
    /**
     * * me(@Context() { potato }): Ïù¥Î†áÍ≤åÌïòÎ©¥ contextÏóêÏÑú ÏõêÌïòÎäî Í∞í Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎã§.
     *
     * * @Context() context
     * * GraphQLModule.forRoot()ÏóêÏÑú Ï∂îÍ∞ÄÎ°ú ÎÑ£Ïñ¥Ï§Ñ Ïàò ÏûàÎã§ ÎøêÏù¥ÏßÄ,
     * * contextÎ°ú Ï†ëÍ∑ºÌïòÎ©¥ Í∏∞Ï°¥ reqÍ∞íÎì§ Îã§ Î∞õÏïÑÏò¨ Ïàò ÏûàÎã§.
     */
  }

  // ! ÌîÑÎ°úÌïÑ Î≥¥Í∏∞
  //@UseGuards(AuthGuard)
  @Query((returns) => UserProfileOutput)
  @Role(['Any'])
  async userProfile(
    @Args() userProfileInput: UserProfileInput,
  ): Promise<UserProfileOutput> {
    return this.usersService.findById(userProfileInput.userId);
  }

  // ! userProfile ÏàòÏ†ï
  // * AuthUser: ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨ÎûåÏùò Ï†ïÎ≥¥ Ï∂úÎ†•
  // @UseGuards(AuthGuard)
  @Role(['Any'])
  @Mutation((returns) => EditProfileOutput)
  async editProfile(
    @AuthUser() authUser: User,
    @Args('input') editProfileInput: EditProfileInput,
  ): Promise<EditProfileOutput> {
    return this.usersService.editProfile(authUser.id, editProfileInput);

    // try {
    //   console.log(
    //     'üöÄ ~ file: users.resolver.ts ~ line 101 ~ UsersResolver ~ editProfileInput',
    //     editProfileInput,
    //   );

    //   console.log(
    //     'editProfie Resolver: ',
    //     await this.usersService.editProfile(authUser.id, editProfileInput),
    //   );

    //   return {
    //     ok: true,
    //   };
    // } catch (error) {
    //   return {
    //     ok: false,
    //     error,
    //   };
    // }
  }

  @Mutation((returns) => VerifyEmailOutput)
  async verifyEmail(
    @Args('input') verifyEmailInput: VerifyEmailInput,
  ): Promise<VerifyEmailOutput> {
    return this.usersService.verifyEmail(verifyEmailInput.code);

    // try {
    //   await this.usersService.verifyEmail(verifyEmailInput.code); // * falseÏù∏ Í≤ΩÏö∞ verifyEmailÏóêÏÑú ErrorÎ°ú ÎçòÏßê
    //   return {
    //     ok: true,
    //   };
    // } catch (error) {
    //   return {
    //     ok: false,
    //     error,
    //   };
    // }
  }
}
